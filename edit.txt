def get_top_sorted_users(user_id, df=df, user_item=user_item):
    '''
    INPUT:
    user_id - (int) ID of the target user
    df - (DataFrame) contains user-article interactions
    user_item - (DataFrame) binary matrix of user-article interactions (1 = interacted, 0 = not)

    OUTPUT:
    neighbors_df - (DataFrame) contains:
        - neighbor_id: ID of similar users
        - similarity: similarity score with the target user
        - num_interactions: total number of article interactions for each neighbor

    DESCRIPTION:
    Calculates the dot product similarity between the target user and all other users.
    Sorts the result by similarity and then by number of interactions in descending order.
    '''
    
    # Calculate similarity scores between user_id and all other users
    similarity_scores = {
        other_user: np.dot(user_item.loc[user_id], user_item.loc[other_user])
        for other_user in user_item.index if other_user != user_id
    }

    # Convert similarity scores to DataFrame
    similarity_df = pd.DataFrame.from_dict(similarity_scores, orient='index', columns=['similarity'])

    # Count article interactions for each user
    interactions_df = df.groupby('user_id')['article_id'].count().to_frame()
    interactions_df.columns = ['num_interactions']

    # Combine into a single DataFrame
    neighbors_df = similarity_df.join(interactions_df)
    neighbors_df['neighbor_id'] = neighbors_df.index

    # Sort by similarity and number of interactions (both descending)
    neighbors_df = neighbors_df.sort_values(by=['similarity', 'num_interactions'], ascending=False)
    neighbors_df = neighbors_df[['neighbor_id', 'similarity', 'num_interactions']]

    return neighbors_df



def user_user_recs_part2(user_id, m=10):
    '''
    INPUT:
    user_id - (int) ID of the user to recommend articles for
    m - (int) number of recommendations desired

    OUTPUT:
    recs - (list) recommended article IDs
    rec_names - (list) recommended article titles

    DESCRIPTION:
    Finds the most similar users to the target user and recommends articles they have read
    that the target user hasn't. Prioritizes users and articles with the most interactions.
    '''
    
    # Get articles already seen by the target user
    seen_article_ids, _ = get_user_articles(user_id, user_item=user_item)
    seen_article_ids = [float(article_id) for article_id in seen_article_ids]

    # Get similar users sorted by similarity and activity
    top_users = get_top_sorted_users(user_id, df=df, user_item=user_item)

    # Get number of interactions for each article
    article_popularity = df.groupby('article_id')['user_id'].count()

    recs = []

    # Iterate through top similar users
    for _, row in top_users.iterrows():
        neighbor_id = row['neighbor_id']
        neighbor_article_ids, _ = get_user_articles(neighbor_id, user_item=user_item)
        neighbor_article_ids = [float(article_id) for article_id in neighbor_article_ids]

        # Find new articles the target user hasn't seen
        unseen_articles = np.setdiff1d(neighbor_article_ids, seen_article_ids, assume_unique=True)
        sorted_unseen = article_popularity.loc[unseen_articles].sort_values(ascending=False)
        new_recs = sorted_unseen.index.tolist()

        # Add unique recommendations
        for article_id in new_recs:
            if article_id not in recs:
                recs.append(article_id)
                if len(recs) >= m:
                    break
        if len(recs) >= m:
            break

    # Get article titles
    rec_names = get_article_names(recs)

    return recs[:m], rec_names
